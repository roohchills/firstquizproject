Highsccore.html working 

Final
<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- head content -->
  </head>
  <body>
    <div id="highscores">
      <!-- High scores will be inserted here -->
    </div>
    <button id="resetbutton">Reset Quiz</button>
    <button id="restartbutton">Restart Quiz</button>


    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Get the username and score from localStorage
        const username = localStorage.getItem("username");
        const finalScore = localStorage.getItem("finalScore");

        // Get the existing high scores from localStorage, or initialize to an empty array if it doesn't exist
        const highscores = JSON.parse(localStorage.getItem("highscores")) || [];

        // Add the new score to the array
        highscores.push({ username, finalScore });

        // Save the updated high scores back to localStorage
        localStorage.setItem("highscores", JSON.stringify(highscores));

        const highscoresDiv = document.getElementById("highscores");
        highscores.sort((a, b) => b.finalScore - a.finalScore);

        // Display high scores

        // Display high scores
        highscores.forEach(function (entry, index) {
            const div = document.createElement("div");
            div.textContent = (index + 1) + ". " + entry.username + "- " + entry.finalScore;
            highscoresDiv.appendChild(div);
        });
        

        const resetButton = document.getElementById("resetbutton");
        resetButton.addEventListener("click", function () {
          // Clear high scores and redirect to quiz.html
          localStorage.removeItem("highscores");
          highscoresDiv.innerHTML = "";
          window.location.href = "quiz.html";
        });

        const restartButton = document.getElementById("restartbutton");
        restartButton.addEventListener("click", function () {
          // Redirect to quiz.html without clearing high scores
          window.location.href = "quiz.html";
        });

      });
    </script>
  </body>
</html


===========================================================================================================================================================================================================================
V0

<!DOCTYPE html>
<html lang="en">
  <head>
    <!-- head content -->
  </head>
  <body>
    <div id="highscores">
      <!-- High scores will be inserted here -->
    </div>
    <button id="resetbutton">Reset Quiz</button>

    <script>
      document.addEventListener("DOMContentLoaded", function () {
        // Get the username and score from localStorage
        const username = localStorage.getItem("username");
        const finalScore = localStorage.getItem("finalScore");

        // Get the existing high scores from localStorage, or initialize to an empty array if it doesn't exist
        const highscores = JSON.parse(localStorage.getItem("highscores")) || [];

        // Add the new score to the array
        highscores.push({ username, finalScore });

        // Save the updated high scores back to localStorage
        localStorage.setItem("highscores", JSON.stringify(highscores));

        const highscoresDiv = document.getElementById("highscores");

        // Display high scores
        highscores.forEach(function (entry) {
          const div = document.createElement("div");
          div.textContent = `${entry.username}: ${entry.finalScore}`;
          highscoresDiv.appendChild(div);
        });

        const resetButton = document.getElementById("resetbutton");
        resetButton.addEventListener("click", function () {
          // Clear high scores and redirect to quiz.html
          localStorage.removeItem("highscores");
          highscoresDiv.innerHTML = "";
          window.location.href = "quiz.html";
        });
      });
    </script>
  </body>
</html>

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Results.html working 
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="assets/style.css" />
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css" />
    <title>Codedamn - Quiz Project</title>
</head>
<body>
    <div class="resultsbox">
        <h1 class="resultstitle">All Done</h1>
        <span id="score">Your final score is: </span>
        <form id="usernameForm">
            <label for="box">Enter Initials:</label>
            <input type="text" id="box" required>
            <button type="submit" class="submitbutton">Submit</button>
        </form>
    </div>

    <script>
        
            // Retrieve the final score from localStorage
            const finalScore = localStorage.getItem("finalScore");

            // Update the score element with the retrieved score
            const scoreElement = document.getElementById("score");
            if (scoreElement) {
                scoreElement.textContent = `Your final score is: ${finalScore || 0}`;
            }

            // Handle form submission
            document.addEventListener("DOMContentLoaded", function () {
            const usernameForm = document.getElementById("usernameForm");
            usernameForm.addEventListener("submit", function (event) {
                event.preventDefault(); // Prevent the default form submission

                // Get the entered username
                const username = document.getElementById("box").value;

                // Store username in localStorage
                localStorage.setItem("username", username);

                // Redirect to highscores.html
                window.location.href = "highscores.html";
            });
        });
    </script>
</body>
</html>


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Quiz.html 
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="assets/style.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
    <title>Codedamn - Quiz Project</title>
  </head>

  <body>
    <nav>
      <a id="leaderboard"
        >View Highscores <i class="fas fa-hand-point-left fa-lg"></i
      ></a>
      <a id="timer">Time: <span id="quizTimer">1:00</span></a>
    </nav>

    <div class="quizbox">
      <h1 class="pagetitle"></h1>
      <div class="optionsection">
        <button class="question" id="option-1"></button>
        <button class="question" id="option-2"></button>
        <button class="question" id="option-3"></button>
        <button class="question" id="option-4"></button>
      </div>
      <span id="answer"></span>
    </div>
    <script src="assets/script.js"></script>
  </body>
</html>


Index.html 
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta http-equiv="X-UA-Compatible" content="IE=edge" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <link rel="stylesheet" href="assets/style.css" />
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.3/css/all.min.css"
    />
    <title>Codedamn - Quiz Project</title>
    <head>
      <!-- Your other meta tags and CSS links -->
    </head>
  </head>

  <body>
    <nav>
      <a id="leaderboard"
        >View Highscores <i class="fas fa-hand-point-left fa-lg"></i
      ></a>
      <a id="timer">Time: <span id="quizTimer">0:00</span></a>
    </nav>

    <main>
      <div class="roundedrectangle">
        <h1 class="pagetitle">Coding Quiz Challenge</h1>
        <span class="secondline"
          >Try to answer the following code-related questions within the time
          limit</span
        ><br />
        <span class="thirdline"
          >Keep in mind that every incorrect answer will penalize your
          score/time by 10 seconds</span
        >
        <button class="button" id="startquizbutton">Start Quiz</button>
      </div>
    </main>

    <script src="assets/script.js"></script>
  </body>
</html>


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Script.js 
Final 
console.log("evaluating script.js from top to bottom");

const startQuizButton = document.getElementById("startquizbutton");
const timerElement = document.getElementById("quizTimer");
const answerElement = document.getElementById("answer");


console.log(startQuizButton, timerElement);
console.log(window.location.href);

let time = 60;
let timerInterval;
let correctAnswers = 0;
let incorrectAnswers = 0;
let currentQuestion = 0;

const questions = [
  {
    questionText: "Commonly used data types DO NOT include:",
    options: ["1. strings", "2. booleans", "3. alerts", "4. numbers"],
    answer: "3. alerts"
  },
  {
    questionText: "Arrays in JavaScript can be used to store ______.",
    options: [
      "1. numbers and strings",
      "2. other arrays",
      "3. booleans",
      "4. all of the above"
    ],
    answer: "4. all of the above"
  },
  {
    questionText:
      "String values must be enclosed within _____ when being assigned to variables.",
    options: ["1. commas", "2. curly brackets", "3. quotes", "4. parentheses"],
    answer: "3. quotes"
  },
  {
    questionText:
      "A very useful tool used during development and debugging for printing content to the debugger is:",
    options: [
      "1. JavaScript",
      "2. terminal/bash",
      "3. for loops",
      "4. console.log"
    ],
    answer: "4. console.log"
  },
  {
    questionText:
      "Which of the following is a statement that can be used to terminate a loop, switch or label statement?",
    options: ["1. break", "2. stop", "3. halt", "4. exit"],
    answer: "1. break"
  }
];

function startTimer() {
  timerInterval = setInterval(() => {
    time--;
    if (time < 0) {
      clearInterval(timerInterval);
      timerElement.textContent = "Time is up!";
      // Handle timer expiry, e.g., submit quiz automatically
    } else {
      const minutes = Math.floor(time / 60)
        .toString()
        .padStart(2, "0");
      const seconds = (time % 60).toString().padStart(2, "0");
      timerElement.textContent = `${minutes}:${seconds}`;
    }
  }, 1000);
}

function showNextQuestion() {
  if (currentQuestion < questions.length) {
    console.log(currentQuestion, questions.length)
    const question = questions[currentQuestion];
    // Show the question and options on the quiz.html page
    document.querySelector(".pagetitle").textContent = question.questionText;
    const optionButtons = document.querySelectorAll(".question");
    optionButtons.forEach((button, index) => {
      button.textContent = question.options[index];
      button.addEventListener("click", checkAnswer);
    });
  } else {
    
    answerElement.textContent = "Quiz completed!";
    console.log("Quiz completed!");
    console.log("Correct Answers:", correctAnswers);
    console.log("Incorrect Answers:", incorrectAnswers);

    // Redirect to results.html after a brief delay
    /*setTimeout(() => {
      window.location.href = "results.html";
    }, 1000);*/

    clearInterval(timerInterval); 
    // Stop the timer interval
  }
}

function checkAnswer(event) {
  const selectedOption = event.target.textContent;
  const question = questions[currentQuestion];
  if (selectedOption === question.answer) {
    // Correct answer
    answerElement.textContent = "Correct answer!";
    console.log("Correct answer!");
    correctAnswers++;
    console.log(correctAnswers)
  } else {
    // Incorrect answer
    answerElement.textContent = "Incorrect answer!";
    console.log("Incorrect answer!");
    incorrectAnswers++;
    console.log(incorrectAnswers)
    time -= 10; // Reduce the timer by 10 seconds for incorrect answers
  }

  currentQuestion++;
  // showNextQuestion();

  setTimeout(() => {
    answerElement.textContent = "";
    
    if (currentQuestion === questions.length) {
      const finalScore = correctAnswers - incorrectAnswers;
      localStorage.setItem("finalScore", finalScore);

      setTimeout(() => {
        answerElement.textContent = "Quiz completed!";
      }, 1000);

      // Redirect to results.html
      setTimeout(() => {
        window.location.href = `results.html?score=${finalScore}`
      }, 2000); // Delay the redirection by 1 second

      clearInterval(timerInterval); // Stop the timer interval
    } else {
      showNextQuestion();
    }
  }, 1000); // Delay the clearing of the answerElement and the showing of the next question by 1 second
}


console.log("current page ---->", window.location.href);
console.log("current value of startQuizButton --->", startQuizButton);
console.log(
  "current value of startQuizButton.addEventListener --->",
  startQuizButton?.addEventListener
);

startQuizButton?.addEventListener("click", () => {
  // Redirect the user to the quiz.html page
  console.log("start timer");
  startTimer();
  console.log("page load");
  window.location.href = "quiz.html";
});

console.log("reached before");

if (window.location.href.includes("quiz.html")) {
  console.log("reached after");
  startTimer();
  showNextQuestion();
}

===========================================================================================================================================================================================================================

V0
console.log("evaluating script.js from top to bottom");

const startQuizButton = document.getElementById("startquizbutton");
const timerElement = document.getElementById("quizTimer");
const answerElement = document.getElementById("answer");


console.log(startQuizButton, timerElement);
console.log(window.location.href);

let time = 60;
let timerInterval;
let correctAnswers = 0;
let incorrectAnswers = 0;
let currentQuestion = 0;

const questions = [
  {
    questionText: "Commonly used data types DO NOT include:",
    options: ["1. strings", "2. booleans", "3. alerts", "4. numbers"],
    answer: "3. alerts"
  },
  {
    questionText: "Arrays in JavaScript can be used to store ______.",
    options: [
      "1. numbers and strings",
      "2. other arrays",
      "3. booleans",
      "4. all of the above"
    ],
    answer: "4. all of the above"
  },
  {
    questionText:
      "String values must be enclosed within _____ when being assigned to variables.",
    options: ["1. commas", "2. curly brackets", "3. quotes", "4. parentheses"],
    answer: "3. quotes"
  },
  {
    questionText:
      "A very useful tool used during development and debugging for printing content to the debugger is:",
    options: [
      "1. JavaScript",
      "2. terminal/bash",
      "3. for loops",
      "4. console.log"
    ],
    answer: "4. console.log"
  },
  {
    questionText:
      "Which of the following is a statement that can be used to terminate a loop, switch or label statement?",
    options: ["1. break", "2. stop", "3. halt", "4. exit"],
    answer: "1. break"
  }
];

function startTimer() {
  timerInterval = setInterval(() => {
    time--;
    if (time < 0) {
      clearInterval(timerInterval);
      timerElement.textContent = "Time is up!";
      // Handle timer expiry, e.g., submit quiz automatically
    } else {
      const minutes = Math.floor(time / 60)
        .toString()
        .padStart(2, "0");
      const seconds = (time % 60).toString().padStart(2, "0");
      timerElement.textContent = `${minutes}:${seconds}`;
    }
  }, 1000);
}

function showNextQuestion() {
  if (currentQuestion < questions.length) {
    console.log(currentQuestion, questions.length)
    const question = questions[currentQuestion];
    // Show the question and options on the quiz.html page
    document.querySelector(".pagetitle").textContent = question.questionText;
    const optionButtons = document.querySelectorAll(".question");
    optionButtons.forEach((button, index) => {
      button.textContent = question.options[index];
      button.addEventListener("click", checkAnswer);
    });
  } else {
    
    answerElement.textContent = "Quiz completed!";
    console.log("Quiz completed!");
    console.log("Correct Answers:", correctAnswers);
    console.log("Incorrect Answers:", incorrectAnswers);

    // Redirect to results.html after a brief delay
    /*setTimeout(() => {
      window.location.href = "results.html";
    }, 1000);*/

    clearInterval(timerInterval); 
    // Stop the timer interval
  }
}

function checkAnswer(event) {
  const selectedOption = event.target.textContent;
  const question = questions[currentQuestion];
  if (selectedOption === question.answer) {
    // Correct answer
    answerElement.textContent = "Correct answer!";
    console.log("Correct answer!");
    correctAnswers++;
    console.log(correctAnswers)
  } else {
    // Incorrect answer
    answerElement.textContent = "Incorrect answer!";
    console.log("Incorrect answer!");
    incorrectAnswers++;
    console.log(incorrectAnswers)
    time -= 10; // Reduce the timer by 10 seconds for incorrect answers
  }

  currentQuestion++;
  showNextQuestion();

  setTimeout(() => {
    answerElement.textContent = "";
    
    if (currentQuestion === questions.length) {
      const finalScore = correctAnswers - incorrectAnswers;
      localStorage.setItem("finalScore", finalScore);

      // Redirect to results.html
      window.location.href = `results.html?score=${finalScore}`

      // Redirect to results.html after a brief delay
      //setTimeout(() => {
        //window.location.href = "results.html";
      //}, 1000);

      clearInterval(timerInterval); // Stop the timer interval
    }
  }, 500);
}


console.log("current page ---->", window.location.href);
console.log("current value of startQuizButton --->", startQuizButton);
console.log(
  "current value of startQuizButton.addEventListener --->",
  startQuizButton?.addEventListener
);

startQuizButton?.addEventListener("click", () => {
  // Redirect the user to the quiz.html page
  console.log("start timer");
  startTimer();
  console.log("page load");
  window.location.href = "quiz.html";
});

console.log("reached before");

if (window.location.href.includes("quiz.html")) {
  console.log("reached after");
  startTimer();
  showNextQuestion();
}


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Style.css
nav {
    display: flex;
    justify-content: space-between;
    background-color: #218380;
    color: white;
    top: 0;
    left: 0;
    width: 100%;
    position: fixed;
    padding: 20px;
  }
  
  .roundedrectangle {
    width: 800px;
    height: 300px;
    border: 2px solid lightgrey;
    border-radius: 20px;
    position: absolute; /* Use absolute positioning */
    top: 50%; /* Position from the top */
    left: 50%; /* Position from the left */
    transform: translate(-50%, -50%);
    box-shadow: 8px 8px 15px rgba(128, 128, 128, 0.5);
  }
  
  #timer {
    /* Move time to the right */
    color: white;
    margin-right: 50px;
    /* Change text color of time */
  }
  
  .pagetitle {
    font-size: 30px;
    position: relative;
    margin-left: 50px;
    margin-top: 60px;
  }
  
  .secondline {
    font-size: 20px;
    position: relative;
    margin-left: 50px;
    font-weight: normal;
  }
  
  .thirdline {
    font-size: 20px;
    margin-left: 50px;
    font-weight: normal;
  }
  
  .button {
    position: relative;
    margin-top: 40px;
    margin-left: 50px;
    border-radius: 10px;
    width: 100px;
    height: 50px;
    border: none;
    background-color: #218380;
    color: white;
    cursor: pointer;
  }
  
  /*.quizbox {
    display: flex;
    flex-direction: column;
    width: 800px;
    height: 470px;
    max-height: 700px;
    /*min-height: 400px;*/
  /*border: 2px solid lightgrey;
    border-radius: 20px;
    margin-left: 500px;
    margin-top: 300px;
    box-shadow: 8px 8px 15px rgba(128, 128, 128, 0.5);
    /*overflow-y: auto;*/
  
  .quizbox {
    display: flex;
    flex-direction: column;
    width: 800px;
    max-width: 90%; /* Adjust as needed */
    min-height: 300px; /* Set a minimum height for the box */
    border: 2px solid lightgrey;
    border-radius: 20px;
    position: absolute; /* Use absolute positioning */
    top: 50%; /* Position from the top */
    left: 50%; /* Position from the left */
    transform: translate(
      -50%,
      -50%
    ); /* Center the box horizontally and vertically */
    box-shadow: 8px 8px 15px rgba(128, 128, 128, 0.5);
    overflow: hidden; /* Add overflow property to handle overflowing content */
  }
  
  .optionsection {
    display: flex;
    flex-direction: column;
    padding-top: 10px;
    gap: 10px; /* Increase the gap for better spacing */
    padding: 30px;
    padding-bottom: 50px; /* Add padding for spacing within the options */
  }
  
  /*.optionsection {
    display: flex;
    flex-direction: column;
    gap: 5px;
    margin-bottom: 10px;
  }*/
  
  .question {
    margin: 10px;
    padding: 12px;
    border-radius: 10px;
    border: 1px solid #218380; /* Change border-color property */
    background-color: #218380;
    color: white;
    cursor: pointer;
    text-align: left;
  }
  
  /*.question {
    position: relative;
    margin-top: 10px;
    margin-left: 50px;
    border-radius: 10px;
    width: 700px;
    height: 50px;
    border: none;
    background-color: #218380;
    color: white;
    cursor: pointer;
    text-align: left;
    padding-left: 22px;
  }*/
  
  #answer {
    position: relative;
    color: blue;
    left: 44px;
    top: -20px;
    margin-bottom: 10px;
  }
  
  /*#option-4 {
    position: relative;
    margin-top: 10px;
    margin-left: 50px;
    border-radius: 10px;
    width: 700px;
    height: 50px;
    border: none;
    background-color: #218380;
    color: white;
    cursor: pointer;
    text-align: left;
    padding-left: 22px;
    margin-bottom: 80px;
  }*/
  
  .resultsbox {
    display: flex;
    flex-direction: column;
    width: 600px;
    max-width: 90%; /* Adjust as needed */
    min-height: 300px; /* Set a minimum height for the box */
    border: 2px solid lightgrey;
    border-radius: 20px;
    position: absolute; /* Use absolute positioning */
    top: 50%; /* Position from the top */
    left: 50%; /* Position from the left */
    transform: translate(
      -50%,
      -50%
    ); /* Center the box horizontally and vertically */
    box-shadow: 8px 8px 15px rgba(128, 128, 128, 0.5);
    overflow: hidden;
  }
  /* Add overflow property to handle overflowing content *
  
  
  /*.resultsbox {
    width: 600px;
    min-height: 200px;
    border: 2px solid lightgrey;
    border-radius: 20px;
    margin-left: 600px;
    margin-top: 400px;
    box-shadow: 8px 8px 15px rgba(128, 128, 128, 0.5);
    overflow-y: auto;
  }*/
  
  .submitbutton {
    position: relative;
    left: 20px;
    bottom: 1px;
    border-radius: 10px;
    width: 75px;
    height: 40px;
    border: none;
    background-color: #218380;
    color: white;
    cursor: pointer;
    text-align: center;
  }
  
  #score {
    position: relative;
    left: 9%;
    top: 2%;
  }
  
  #initials {
    position: relative;
    left: 9%;
    top: 10px;
  }
  
  #box {
    position: relative;
    top: 10px;
    left: 8px;
    height: 25px;
  }
  
  .resultstitle {
    position: relative;
    top: 3%;
    left: 9%;
  }
  

